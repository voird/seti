#include <iostream>
#include <winsock2.h>
#include <windows.h>
#define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
#include <experimental/filesystem>
#include <fstream>
#include <string>
#pragma comment (lib, "Ws2_32.lib")
using namespace std;
#define SRV_PORT 1234
#define BUF_SIZE 64
const string QUEST = "Who are you?'n";

struct Student {
	char name[25]{};
	int grades[4]{};
	int answer{};
	string client_name{};
};

void send_file(SOCKET* s, const string& file_name) {
	fstream file;
	file.open("../" + file_name + ".client", ios::binary);
	if (file.is_open()) {
		int file_size = experimental::filesystem::file_size(file_name) + 1;
		char* bytes = new char[file_size];
		file.read(bytes, file_size);
		send(*s, to_string(file_size).c_str(), 16, 0);
		send(*s, file_name.c_str(), 32, 0);
		send(*s, bytes, file_size, 0);
		delete[] bytes;
	}
	else
		cout << "error";
	file.close();
}

void recv_file(SOCKET* s) {
	char file_size_str[16];
	char file_name[32];
	recv(*s, file_size_str, 16, 0);
	int file_size = atoi(file_size_str);
	char* bytes = new char[file_size];
	recv(*s, file_name, 32, 0);
	fstream file;
	file.open(file_name, ios_base::out, ios_base::binary);
	cout << "size: " << file_size << endl;
	cout << "name: " << file_name << endl;
	if (file.is_open()) {
		recv(*s, bytes, file_size, 0);
		cout << "bytes: " << bytes << endl;
		file.write(bytes, file_size);
		cout << "Saved!";
	}
	else
		cout << "Error";
}


int main() {
	char buff[1024];
	if (WSAStartup(0x0202, (WSADATA*)&buff[0])) {
		cout << "Error WSAStartup \n" << WSAGetLastError(); // Ownbra!
		return -1;
	}
	SOCKET s, s_new;
	int from_len;
	char buf[BUF_SIZE] = { 0 };
	sockaddr_in sin, from_sin;

	s = socket(AF_INET, SOCK_STREAM, 0);
	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = 0;
	sin.sin_port = htons(SRV_PORT);
	bind(s, (sockaddr*)&sin, sizeof(sin));
	string msg, msg1;
	listen(s, 3);
	while (1)
	{
		from_len = sizeof(from_sin);
		s_new = accept(s, (sockaddr*)&from_sin, &from_len);
		cout << " new connected client!" << endl;
		msg = QUEST;
		while (1)
		{
			send(s_new, (char*)&msg[0], msg.size(), 0);
			recv_file(&s_new);
			if (msg1 == "Bye") break;
			getline(cin, msg);
		}
		cout << "client is lost";
		closesocket(s_new);
	}
	return 0;
}
