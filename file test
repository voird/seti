#include <iostream>
#include "fstream"
#include <string>
#define WINSOCK _DEPRECATED_NO _WARNINGS // winsoc2
#define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
#include <winsock2.h>sd
#include <string>
#include <windows.h>
#include <experimental/filesystem>
#include <ws2tcpip.h>
#pragma comment (lib, "Ws2_32.lib")
#pragma warning (disable: 4996) // 4996
using namespace std;
#define SRV_HOST "localhost"
#define SRV_PORT 1234
#define CLNT_PORT 1235
#define BUF_SIZE 64
char TXT_ANSW[] = "I am your student\n";

using namespace std;

struct Student {
    char name[25]{};
    int grades[4]{};
    int answer{};
    string client_name{};
};

void send_file(SOCKET* s, const string& file_name) {
    fstream file;
    file.open("../" + file_name + ".client", ios::binary);
    if (file.is_open()) {
        int file_size = experimental::filesystem::file_size(file_name) + 1;
        char* bytes = new char[file_size];
        file.read(bytes, file_size);
        send(*s, to_string(file_size).c_str(), 16, 0);
        send(*s, file_name.c_str(), 32, 0);
        send(*s, bytes, file_size, 0);
        delete[] bytes;
    }
    else
        cout << "error";
    file.close();
}

void recv_file(SOCKET* s) {
    char file_size_str[16];
    char file_name[32];
    recv(*s, file_size_str, 16, 0);
    int file_size = atoi(file_size_str);
    char* bytes = new char[file_size];
    recv(*s, file_name, 32, 0);
    fstream file;
    file.open(file_name, ios_base::out, ios_base::binary);
    cout << "size: " << file_size<< endl;
    cout << "name: " << file_name << endl;
    if (file.is_open()) {
        recv(*s, bytes, file_size, 0);
        cout << "bytes: " << bytes<<endl;
        file.write(bytes, file_size);
        cout << "Saved!";
    }
    else
        cout << "Error";
}

int main() {
    string file_name;
    cout << "input file_name: ";
    cin >> file_name;

    ofstream ost("../"+file_name + ".client");

    char buff[1024];
    if (WSAStartup(0x0202, (WSADATA*)&buff[0]))
    {
        cout << "Error WAStartup \n"
            << WSAGetLastError();
        return -1;
    }
    SOCKET s;
    int from_len;
    char buf[BUF_SIZE] = { 0 };
    hostent* hp;
    sockaddr_in cInt_sin, srv_sin;

    s = socket(AF_INET, SOCK_STREAM, 0);

    cInt_sin.sin_family = AF_INET;
    cInt_sin.sin_addr.s_addr = 0;
    cInt_sin.sin_port = htons(CLNT_PORT);
    bind(s, (sockaddr*)&cInt_sin, sizeof(cInt_sin));
    hp = gethostbyname(SRV_HOST);
    srv_sin.sin_port = htons(SRV_PORT);
    srv_sin.sin_family = AF_INET;
    in_addr ip_to_num;
    int erStat = inet_pton(AF_INET, "192.168.0.230", &ip_to_num);
    if (erStat <= 0) {
        cout << "Error in IP translation to special numeric format" << endl;
        return 1;
    }
    srv_sin.sin_addr = ip_to_num;
    connect(s, (sockaddr*)&srv_sin, sizeof(srv_sin));
    cout << "help";
    string path;
    do {
        cout << "help";
        from_len = recv(s, (char*)&buf, BUF_SIZE, 0);
        cout << "help";
        buf[from_len] = 0;
        cout << buf << endl;
        Student student{};
        cout << "Введите имя:\n";
        cin >> student.name;
        cout << "Введите оценки:\n";
        for (int i = 0; i < 4; i++)
            cin >> student.grades[i];
        student.client_name = file_name;
        ost.write((char*)&student, sizeof(student));
        ost.close();
        cin >> path;
        send_file(&s, path);
    } while (path != "Bye");
    closesocket(s);
}
