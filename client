#include <iostream>
#define WINSOCK _DEPRECATED_NO _WARNINGS // winsoc2
#include <winsock2.h>
#include <string>
#include <windows.h>
#include <ws2tcpip.h>
#pragma comment (lib, "Ws2_32.lib")
#pragma warning (disable: 4996) // 4996
using namespace std;
#define SRV_HOST "localhost"
#define SRV_PORT 1234
#define CLNT_PORT 1235
#define BUF_SIZE 64
char TXT_ANSW[] = "I am your student\n";
int main() {
	char buff[1024];
	if (WSAStartup(0x0202, (WSADATA*)&buff[0]))
	{
		cout << "Error WAStartup \n"
			<< WSAGetLastError();
		return -1;
	}
	SOCKET s;
	int from_len;
	char buf[BUF_SIZE] = { 0 };
	hostent* hp;
	sockaddr_in cInt_sin, srv_sin;

	s = socket(AF_INET, SOCK_STREAM, 0);

	cInt_sin.sin_family = AF_INET;
	cInt_sin.sin_addr.s_addr = 0;
	cInt_sin.sin_port = htons(CLNT_PORT);
	bind(s, (sockaddr*)&cInt_sin, sizeof(cInt_sin));
	hp = gethostbyname(SRV_HOST);
	srv_sin.sin_port = htons(SRV_PORT);
	srv_sin.sin_family = AF_INET;
	in_addr ip_to_num;
	int erStat = inet_pton(AF_INET, "26.123.206.22", &ip_to_num);
	if (erStat <= 0) {
		cout << "Error in IP translation to special numeric format" << endl;
		return 1;
	}
	srv_sin.sin_addr = ip_to_num;
	connect(s, (sockaddr*)&srv_sin, sizeof(srv_sin));
	string mst;
	do {
		from_len = recv(s, (char*)&buf, BUF_SIZE, 0);
		buf[from_len] = 0;
		cout << buf << endl;
		//send (s, (char *)&TXT_ANSW, sizeof(TXT_ANSW),0);
		getline(cin, mst);
		int msg_size = mst.size();
		send(s, (char*)&mst[0], msg_size, 0);
	} while (mst != "Bye");
	cout << "exit to infinity" << endl;
	cin.get();
	closesocket(s);
	return 0;
}
